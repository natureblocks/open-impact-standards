// ========== Open Standard Schema Specification ==========

// A 'type' is a specification to which a json object must conform.

// Top-level object
type Standard {
    // The name of the standard
    standard: string,

    // List of relevant parties
    parties: [Party],

    // List of Node ids whose dependencies have been met,
    // but whose conditions for completion have not been satisfied.
    activeNodes: [int],

    // The nodes that comprise the standard's dependency chart
    nodes: {node.id: Node},

    // If two or more Node objects use an identical DependencySet,
    // the DependencySet is added to this array and referenced by those nodes.
    // DependencySet objects can be referenced in Node.dependencySets
    // using a DependencySetReference object.
    dependencySets: [DependencySet]
}

// Represents a party involved in the following of the standard.
type Party {
    name: string
    // Additional properties TBD...
}

// Represents a node in the Standard's dependency chart.
type Node {
    description: string,
    nodeType: NodeType,
    appliesTo: Party.name,
    references: [string]?,
    dependencySet: DependencySet?,
    dependenciesMet: boolean,
    completed: boolean
}

enum NodeType {
    action,
    state,
    question
}

// A grouping of dependencies objects under a unique, human-readable alias
// that can be referenced in the dependency chart.
type DependencySet {
    // alias and gateType are not required when dependencies.length <= 1
    alias: string, // "humanReadableName#0000"
    gateType: GateType,

    dependencies: [Dependency | DependencySetReference]
}

// A simple reference to a reuseable DependencySet object
// defined in the Standard.dependencySets array.
type DependencySetReference {
    alias: DependencySet.alias
}

type Dependency {
    id: Node.id,

    // Must be the name of a property of the referenced Node.
    property: string,

    // Exactly one of the following fields must be present.
    equals: scalar,
    doesNotEqual: scalar,
    greaterThan: scalar,
    lessThan: scalar,
    regex: string,
    anyOf: [scalar],
    oneOf: [scalar],
    noneOf: [scalar]
}

enum GateType {
    AND,
    OR,
    XOR,
    NAND,
    NOR,
    XNOR
}